/*
==============================================================================
                     SALES DATABASE QUERIES
============================================================================== **/

/**                             Easy 
1.	The category managers want to review sales performance. Can you prepare a report 
    showing the total revenue generated by each product category? **/ 
SELECT p.product_category, SUM(od.quantity * p.price) AS total_revenue
FROM products 	p
INNER JOIN orderdetails od ON p.product_id = od.product_id
GROUP BY p.product_category
ORDER BY total_revenue DESC;

/**                                Easy 
2. The merchandising team is preparing a campaign and needs to know which products are selling the
    most. Share the top 5 products by quantity sold. **/ 
SELECT p.product_name, SUM(od.quantity) AS quantity_sold
FROM products p
JOIN orderdetails od ON p.product_id = od.product_id
GROUP BY p.product_name
ORDER BY quantity_sold DESC 
LIMIT 5;

/**                                  Easy 
3. The customer relationship team wants a list of all customers who placed more than 
          5 orders so they can be considered for loyalty rewards. **/
SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS total_orders
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY 1,2
HAVING COUNT(o.order_id) > 5
ORDER BY total_orders DESC;

/** -------------------------------------------------------------
 Homework (Easy)
 --------------------------------------------------------------
 Q: The operations team suspects we have stock that isn’t moving.  
    Identify the products that have never been ordered so far.
----------------------------------------------------------------**/

/** Note:
 To test this query, we’ll remove a few product IDs from the 
 OrderDetails table. This simulates products that have never 
 been ordered, allowing us to verify that the query works correctly.
**/

-- Step 1: Delete sample product IDs from OrderDetails to test the query
DELETE FROM orderdetails WHERE product_id IN (65, 81);

-- Step 2: Identify products that have never been ordered
SELECT p.product_id, p.product_name
FROM products p
LEFT JOIN orderdetails od ON p.product_id = od.product_id
WHERE od.product_id IS NULL;

-- Step 3: Verify that the deleted product IDs no longer exist in OrderDetails
SELECT * FROM orderdetails WHERE product_id IN (65, 81);

/**                              Medium 
4. Finance is analyzing trends. Provide a report that shows the monthly sales 
     revenue for the last 6 months. **/
SELECT DATE_TRUNC('month', o.order_date)::DATE AS month,
 SUM(od.quantity * p.price) AS total_revenue
FROM orders o
JOIN orderdetails od ON O.order_id = od.order_id
JOIN products p ON od.product_id = p.product_id
WHERE o.order_date >= CURRENT_DATE - INTERVAL '6 months'
GROUP BY month
ORDER BY month ASC;


/**                              Medium 
5.	The sales head wants to know which customers bring in the most money. Share the 
     list of the top 10 customers by total revenue contribution. **/
SELECT c.customer_id, c.customer_name, SUM(od.quantity * p.price) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN orderDetails od ON o.order_id = od.order_id
JOIN products p ON od.product_id = p.product_id
GROUP BY c.customer_id, c.customer_name --1, 2
ORDER BY total_revenue DESC
LIMIT 10;

/**                              Medium 
6.	Marketing is planning the next quarter’s campaign. Tell us which product category 
     brought in the highest revenue in the 3rd quarter of 2025. **/
SELECT P.product_category, SUM(od.quantity * p.price) AS highest_revenue
FROM orders o
JOIN orderDetails od ON o.order_id = od.order_id
JOIN products p ON od.product_id = p.product_id
WHERE o.order_date BETWEEN '2025-07-01' AND '2025-09-30'
GROUP BY p.product_category 
ORDER BY highest_revenue DESC
LIMIT 1;



SELECT * FROM customers;
SELECT * FROM products;
SELECT * FROM orders;
SELECT * FROM orderdetails;




